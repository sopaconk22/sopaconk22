#LC 1028. Recover a Tree From Preorder Traversal

``` cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    bool isdigit (string &traversal, int i){
        return (traversal[i]>=48 && traversal[i]<=57);
    }
public:
    TreeNode* recoverFromPreorder(string traversal) {
        int i=0;
        int n=traversal.size();
        int num=0;
        while(i<n && isdigit(traversal,i)){
            num=num*10+traversal[i]-48;
            ++i;
        }
        TreeNode* root= new TreeNode(num);
        map<int,TreeNode*> m;
        map<int,bool> m2;
        m[0]=root;
        int c=0;
        while(i<n){
            if(isdigit(traversal,i)){
                num=0;
                while(i<n && isdigit(traversal,i)){
                 num=num*10+traversal[i]-48;
                ++i;
                }
                if(!m[c-1]->left){
                    m[c-1]->left=new TreeNode(num);
                    m[c]=m[c-1]->left;
                }
                else{
                    m[c-1]->right=new TreeNode(num);
                    m[c]=m[c-1]->right;
                }
                c=0;
            }
            else{
                c++;
                i++;
            }
        }
        return root;
    }
};
```
